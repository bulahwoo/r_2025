id <- c("ab", "cd", "ef", "gh" , "ij")
temperature <- c(35, 52, 44, 13, 27)
food <- c("banana", "apple", "pear", "mango", "orange")
str(data.frame(id, temperature, food))
rbind(id, temperature, food)
id <- c("ab", "cd", "ef", "gh" , "ij")
temperature <- c(35, 52, 44, 13, 27)
food <- c("banana", "apple", "pear", "mango", "orange")
str(data.frame(id, temperature, food))
data.frame(id, temperature, food)
mydf <- data.frame(id, temperature, food))
mydf <- data.frame(id, temperature, food)
mydf
str(mydf)
typeof(mydf)
typeof(id)
mydf <- data.frame(id, temperature, food)
mydfc <- cbind.data.frame(id, temperature, food)
mydf
mydfc
mydf == mydfc
mydfr <- rbind.data.frame(id, temperature, food)
mydfc
mydfr
t(mydfc)
str(mydfc)
str(mydfr)
mydfc
titanic
Titanic
cars
pressure
c(1, 0, 1, 0, 1)
str(c(1, 0, 1, 0, 1))
as.character(c(1, 0, 1, 0, 1))
as.factor(c(1, 0, 1, 0, 1))
as.complex(c(1, 0, 1, 0, 1))
as.integer(c(1, 0, 1, 0, 1))
as.double(c(1, 0, 1, 0, 1))
?as.double
as.integer(c(1.2, 0, 1, 0, 1))
as.integer(c(1.5, 0, 1, 0, 1))
as.integer(c("1.5", 0, 1, 0, 1))
c("1.5", 0, 1, 0, 1)
as.double(c("1.5", 0, 1, 0, 1))
as.logical(c("1.5", 0, 1, 0, 1))
as.logical(c("1", 0, 1, 0, 1))
as.logical(c(1, 0, 1, 0, 1))
as.logical(c(1.2, 0, 1, 0, 1))
as.integer(c(1.2, 0, 1, 0, 1))
as.integer(c(1.7, 0, 1, 0, 1))
as.integer(c(2, 0, 1, 0, 1))
as.logical(c("2", 0, 1, 0, 1))
as.logical(c(2, 0, 1, 0, 1))
?as.logical
as.logical(12)
as.logical(0)
as.logical(-2)
as.logical("a")
is.logical("a")
is.logical(0)
is.logical(-2)
is.logical(2)
is.logical(c(t,f))
is.logical(c(TURE,FALSE))
is.logical(c(TRUE,FALSE))
is.logical(c(TRUE,fALSE))
is.logical(c(TRUE,F))
is.logical(c(TRUE,False))
is.logical(TRUE)
is.logical(false)
is.logical(c(1))
is.logical(c(1,2))
is.logical(c(1,0))
is.logical(1)
is.logical(0)
as.logical(c(1,0))
c(TRUE, TRUE, FALSE)
str(c(TRUE, TRUE, FALSE))
typeof(c(TRUE, TRUE, FALSE))
class(c(TRUE, TRUE, FALSE))
as.character(c(TRUE, TRUE, FALSE))
2 %in% 1:10
summary(mydfc)
str(mydfc)
head(mydfc)
LETTERS[1:10]
LETTERS[1:10] + seq(1,10)
seq(1,10)
paste(LETTERS[1:10], seq(1,10), sep="_")
paste(LETTERS[1:10], seq(1,5), sep="_")
paste(LETTERS[1:10], seq(1,15), sep="_")
rownames(mydfc)
rownames(mydfc) <- c("z1", "z2", "z3", "z4", "z5")
rownames(mydfc) <- c("z1", "z2", "z3", "z4", "z5")
rownames(mydfc) <- c("z1", "z2", "z3", "z4", "z4")
?read.csv
View(mydf)
View(mydfc)
View(mydfr)
?NA
?NaN
nametag <- c("Tom", "Peter", "Amy", "Mary", "Kim", "Carl", "Jose", "Sofia", "Lucy", "Rock")
food <- c("banana", "apple", "pear", "mango", "orange", "apple", "orange", "mango", "mango", "banana")
weight <- c(4.5, 3, 3.2, 2.5, 6, 7.7, 6.6, 4.1, 1.9, 5.3)
age <- c(2.5, 3, 1.5, 5, 7, 3.3, 12, 8, 4.4, 0.8)
sex <- c("male","male","female","female","female","male","male","female","female","male")
vaccine <- c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE)
cat_df <- cbind.data.frame(nametag, food, weight, age, sex, vaccine)
cat_df
str(cat_df)
rownames(cat_df)
rownames(cat_df[3:5, ])
rownames(cat_df[c(3:5, 8), ])
cat_df
cat_df_name <- cbind.data.frame(food, weight, age, sex, vaccine)
cat_df_name <- cbind.data.frame(food, weight, age, sex, vaccine)
rownames(cat_df_name)
cat_df_name <- cbind.data.frame(food, weight, age, sex, vaccine)
rownames(cat_df_name) <- nametag
cat_df_name <- cbind.data.frame(food, weight, age, sex, vaccine)
rownames(cat_df_name) <- nametag
cat_df_name
nametag <- c("Tom", "Peter", "Amy", "Mary", "Kim", "Carl", "Jose", "Sofia", "Lucy", "Rock")
food <- c("banana", "apple", "pear", "mango", "orange", "apple", "orange", "mango", "mango", "banana")
weight <- c(4.5, 3, 3.2, 2.5, 6, 7.7, 6.6, 4.1, 1.9, 5.3)
age <- c(2.5, 3, 1.5, 5, 7, 3.3, 12, 8, 4.4, 0.8)
sex <- c("male","male","female","female","female","male","male","female","female","male")
vaccine <- c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE)
cat_df <- cbind.data.frame(nametag, food, weight, age, sex, vaccine)
cat_df[, 1]
cat_df_name <- cbind.data.frame(food, weight, age, sex, vaccine)
rownames(cat_df_name) <- nametag
cat_df_name
cat_df_name[, 1]
cat_df$nametag=="Tom"
which(cat_df$nametag=="Tom")
cat_df[which(cat_df$nametag=="Tom")]
cat_df[which(cat_df$nametag=="Tom"),]
cat_df[1,]
cat_df[,1]
cat_df
rownames(cat_df_name)
rownames(cat_df_name)=="Tom"
c("2")
length(c("2"))
length(c(1:100))
length(c(1:10))
?seq
seq(2,8,3)
seq(2,8,2)
seq(2,8,6)
seq(2,8,7)
seq(2,8,1.5)
seq(8:2)
desc(seq(8:2))
order(seq(8:2), decreasing = T)
order(seq(2:8), decreasing = T)
cbind(c(1, 2, 3, 4, 5), c("a", "b", "c", "d", "e"))
cbind(x=c(1, 2, 3, 4, 5), y=c("a", "b", "c", "d", "e"))
cbind.data.frame(x=c(1, 2, 3, 4, 5), y=c("a", "b", "c", "d", "e"))
str(cbind(x=c(1, 2, 3, 4, 5), y=c("a", "b", "c", "d", "e")))
str(cbind.data.frame(x=c(1, 2, 3, 4, 5), y=c("a", "b", "c", "d", "e")))
str(data.frame(x=c(1, 2, 3, 4, 5), y=c("a", "b", "c", "d", "e")))
chr_x <- c("2", "100", "64.2")
dbl_x <- c(2, 100, 64.2)
str(chr, dbl_x)
str(chr_x, dbl_x)
str(chr_x)
str(dbl_x)
typeof(dbl_x)
typeof(chr_x)
data.frame(chr_x, dbl_x)
xx <- data.frame(chr_x, dbl_x)
xx
str(xx)
typeof(xx)
dim(xx)
head(xx)
tail(xx)
head(xx, 2)
tail(xx, 2)
?head
?head()
summary(xx)
str(xx)
dim(sleep)
head(sleep)
tail(sleep)
getwd()
setwd("/home/nguyen/r_tutorial/day_1/")
"This\u00a0is\u00a0tricky"
str_view("This\u00a0is\u00a0tricky")
tidyverse:str_view("This\u00a0is\u00a0tricky")
tidyverse::str_view("This\u00a0is\u00a0tricky")
stringr::str_view("This\u00a0is\u00a0tricky")
palmerpenguins::penguins
str(palmerpenguins::penguins)
book <- 6
pencil = 7
book
pencil
book = pencil
book
pencil
book <- 6
book
pencil
book == pencil
6 == 7
ls()
sessionInfo()
kissing <- c(1:5)
missing <- c(6:10)
kissing
missing
?print
kissing
missing == kissing
str(missing == kissing)
kissing <- c(1,3,5,7,9)
missing
missing == kissing
missing <- c(3,4,5,6,7)
missing == kissing
kissing <- c(1,100,2,61,9)
missing <- c(3,100,5,61,7)
missing == kissing
typeof(missing)
typeof(kissing)
str(kissing)
str(missing == kissing)
typeof(missing == kissing)
logica;
kissing <- c(1,3,5,7,9)
missing <- c(3,100,5,61,7)
missing == kissing
ls()
rm(c("book", "pencil"))
rm(list=c("book", "pencil"))
ls()
?rm
c(1L, 6L, 10L)
?c
19 %% 5
1:10 / 5
3 + 12
20 - 3
5 * 10
30 / 3
2 ^ 3
19 / 5
19 %% 5
5 * 10
30 / 3
19 / 5
2 ^ 3
19 / 5
19 %% 5
kissing <- c(1,3,5,7,9)
missing <- c(3,100,5,61,7)
missing == kissing
30 / 3
2 ^ 3
19 / 5
- What's the difference between the objects home and jojo?
- When the object home was created, the number 13.6 was enclosed in quotation marks.
1.1+6
1.1+6.1
1L+6.1
typeof(1)
typeof(2)
typeof(2L)
typeof("ss")
typeof(TRUE)
?str
str(home)
str("cc")
str("moe")
str(123)
str(123L)
money <- 12
note <- "12"
money == note
is.TRUE(money == note)
isTRUE(money == note)
typeof(money)
typeof(note)
money <- "13"
note <- "12"
money == note
FALSE <- 3
ls()
ls <- 12
ls()
rm(list=c(ls))
rm(list=c("ls"))
ls()
T <- 12
T
rm(list=c("T"))
ls()
T
typeof
?typeof
typeof(colnames(df01)) # use typeof() to check the type of any object
df01 <- data.frame(c(1, 7, 3),
c("S", "A", "U"),
c(TRUE, FALSE, TRUE))
typeof(colnames(df01)) # use typeof() to check the type of any object
colnames(df01)
colnames(df01) <- c("Fruit", "Initial", "Stock")
colnames(df01)
df01
?write.table
?dim
dim(df01)
df01 <- data.frame(c(1, 7, 3),
c("S", "A", "U"),
c(TRUE, FALSE, TRUE))
df01
dim(df01)
median(x = 1:10)
median(x <- 1:10)
x
median(x = 1:10)
x
median(y = 1:10)
median(y = 2:9)
?median
summary()
summary()
?summary
summary(mtcars)
c(2,3,4) == 2:4
c(2,3,4,5,6,7)
2:7
1:100000000
1:100
?rep
rep(1:4, 2)
rep(LETTERS[1:5], 100)
rep(LETTERS, 4)
rep(sample(LETTERS), 4)
rep(sample(LETTERS), 40)
head(mtcasrs)
head(mtcars)
str(mtcars)
str(airquality)
mtcars
airquality
summary(mtcars)
summary(airquality)
airquality$Ozone
colnames(airquality)
colnames(airquality)[2]
colnames(airquality)[2] <- "Sun"
colnames(airquality)
str(mtcars)
colnames(airquality)
colnames(airquality)[1]
colnames(airquality)[1,2]
df <- data.frame(1:12, 3:14)
df
d <- 1:4
str(df)
str(d)
?str
?matrix
matrix(1:12)
str(matrix(1:12))
str(1:12)
typeof(1:12)
class(1:12)
dim(1:12)
dim(c(1:12))
dim(d)
dim(df)
/.dim
?dim
c(1,2,4)
str(c(1,2,4))
str(c(1,2,3))
str(1:3)
dim(1:3)
dim(c(1,2,3))
dim(df)
str(df)
typeof(df)
typeof(1:3)
length(1:3)
length(d)
length(df)
df
str(df)
length(df)
str(d)
library(dplyr)
catdata <- read.table("C:/Users/isla_/Documents/catdata.tsv", header = TRUE, sep = "\t")
catdata
catdata |>
filter(residence == "Czech") |>
summarize(n())
catdata |>
filter(residence == "Czech")
#3
catdata |>
filter(residence == "Norway") |>
arrange(health)
#3
catdata |>
filter(residence == "Norway") |>
arrange(age)
#3
catdata |>
filter(residence == "Norway") |>
slice_max(age, n=1)
#3
catdata |>
filter(residence == "Norway") |>
slice_max(age, n=1) |>
select(health)
catdata |>
filter(breed == "Bengal")
#4
catdata |>
filter(breed == "Bengal") |>
group_by(residence) |>
summarize(number = n())
#4
catdata |>
filter(breed == "Bengal") |>
group_by(residence) |>
summarize(number = n()) |>
slice_max(number)
catdata |>
filter(health %in% c("Okay", "Great", "Excellent"))
#5
catdata |>
filter(health %in% c("Okay", "Great", "Excellent")) |>
group_by(residence) |>
summarize(number = n()) |>
slice_max(number)
#4
catdata |>
slice_max(length, n = 1)
#4
catdata |>
slice_max(length, n = 1) |>
select(residence)
#7
catdata |>
mutate(age_month = age * 12)
#8
catdata |>
group_by(age) |>
slice_max(age, n = 1)
#8
catdata |>
group_by(residence) |>
slice_max(age, n = 1)
catdata |>
filter(food == "Wet")
catdata |>
mutate(age_month = age * 12)
catdata |>
mutate(age_month = age * 12) |>
filter(age_month > 20, food = "Wet")
catdata |>
mutate(age_month = age * 12) |>
filter(age_month > 20, food == "Wet")
catdata
catdata |>
mutate(age_month = age * 12) |>
filter(age_month > 20, food == "Wet") |>
group_by(residence) |>
summarize(avg_age = mean(length))
catdata |>
mutate(age_month = age * 12) |>
filter(age_month > 20, food == "Wet") |>
group_by(residence) |>
summarize(avg_length = mean(length))
catdata |>
mutate(age_month = age * 12) |>
filter(age_month > 20, food == "Dry") |>
group_by(residence) |>
summarize(avg_length = mean(length))
getwd()
setwd("C:/Users/isla_/Desktop/r_2025")
?rm
dir.create("hi")
rm(list = c(hi))
unlink(hi, recursive = T)
unlink("./hi/", recursive = T)
zoo <- 13
tiger <- "soup"
train <- c("1st", "2nd")
type(1)
type("1")
type(zoo)
typeof(1)
typeof(set)
typeof("zoo")
typeof(tiger)
character
price <- 199
typeof(price)
typeof(199)
v <- 13+2
typeof(v)
v <- 13.0
typeof(v)
